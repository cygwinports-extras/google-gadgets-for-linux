--- origsrc/google-gadgets-for-linux-0.10.5/configure.ac	2009-01-07 20:51:11.000000000 -0600
+++ src/google-gadgets-for-linux-0.10.5/configure.ac	2009-01-29 11:52:34.408613500 -0600
@@ -400,13 +400,20 @@ if test x$ggl_oem_brand != x; then
 fi
 
 case $host_os in
-  *interix* | *mks* | *winnt* | *cygwin* | *mingw* )
+  *interix* | *mks* | *winnt* | *mingw* )
     ggl_host_type=windows
     PREDEFINED_MACROS="$PREDEFINED_MACROS -DGGL_HOST_WINDOWS=1"
     SMJS_CFLAGS="-DXP_WIN"
     GGL_PLATFORM_SHORT="\"win\""
     GGL_PLATFORM="\"windows\""
     ;;
+  *cygwin* )
+    ggl_host_type=cygwin
+    PREDEFINED_MACROS="$PREDEFINED_MACROS -DGGL_HOST_CYGWIN=1"
+    SMJS_CFLAGS="-DXP_UNIX"
+    GGL_PLATFORM_SHORT="\"cygwin\""
+    GGL_PLATFORM="\"cygwin\""
+    ;;
   *darwin* )
     ggl_host_type=macosx
     PREDEFINED_MACROS="$PREDEFINED_MACROS -DGGL_HOST_MACOSX=1"
@@ -439,6 +446,7 @@ AC_SUBST(GGL_PLATFORM_SHORT)
 AC_SUBST(GGL_PLATFORM)
 
 AM_CONDITIONAL([GGL_HOST_WINDOWS], [test x$ggl_host_type = xwindows])
+AM_CONDITIONAL([GGL_HOST_CYGWIN], [test x$ggl_host_type = xcygwin])
 AM_CONDITIONAL([GGL_HOST_MACOSX], [test x$ggl_host_type = xmacosx])
 AM_CONDITIONAL([GGL_HOST_LINUX], [test x$ggl_host_type = xlinux])
 AM_CONDITIONAL([GGL_HOST_SOLARIS], [test x$ggl_host_type = xsolaris])
@@ -558,7 +566,8 @@ has_qt4=no
 has_qtnetwork=no
 has_qtwebkit=no
 has_qtscript=no
-if test x$ggl_host_type = xlinux; then
+case x$ggl_host_type in
+xlinux|xcygwin)
   PKG_CHECK_MODULES(QT4, [QtGui >= 4.3 QtCore >= 4.3 QtNetwork >= 4.3],
 		    [has_qt4=yes
 		     MOC=`$PKG_CONFIG --variable=moc_location QtCore`],
@@ -572,7 +581,8 @@ if test x$ggl_host_type = xlinux; then
   PKG_CHECK_MODULES(QT4SCRIPT, [QtCore >= 4.4 QtScript >= 4.4],
 		    [has_qtscript=yes],
 		    [has_qtscript=no])
-elif test x$ggl_host_type = xmacosx; then
+  ;;
+xmacosx)
   # There is no pkgconfig for Qt on MacOSX, just do header check.
   AC_CHECK_HEADERS([QtCore/QtCore QtGui/QtGui QtNetwork/QtNetwork],
 		   [has_qt4=yes], [has_qt4=no])
@@ -601,9 +611,11 @@ elif test x$ggl_host_type = xmacosx; the
   if test x$has_qtscript = xyes; then
     QT4SCRIPT_LIBS="-framework QtCore -framework QtScript -lz -lm"
   fi
-else
+  ;;
+*)
   AC_MSG_WARN([Qt support is not available for $ggl_host_type])
-fi
+  ;;
+esac
 
 AC_SUBST(MOC)
 
--- origsrc/google-gadgets-for-linux-0.10.5/extensions/gst_audio_framework/gst_audio_framework.cc	2008-11-21 00:50:21.000000000 -0600
+++ src/google-gadgets-for-linux-0.10.5/extensions/gst_audio_framework/gst_audio_framework.cc	2009-01-29 03:29:59.016125000 -0600
@@ -47,6 +47,9 @@ static const char *kGstAudioSinks[] = {
   "alsasink",
   "osssink",
 #endif
+#if GGL_HOST_CYGWIN
+  "osssink",
+#endif
 #if GGL_HOST_MACOSX
   "osxaudiosink",
 #endif
--- origsrc/google-gadgets-for-linux-0.10.5/extensions/gst_video_element/gst_video_element.cc	2008-10-31 05:05:28.000000000 -0500
+++ src/google-gadgets-for-linux-0.10.5/extensions/gst_video_element/gst_video_element.cc	2009-01-29 03:30:25.859875000 -0600
@@ -70,6 +70,9 @@ static const char *kGstAudioSinks[] = {
   "alsasink",
   "osssink",
 #endif
+#if GGL_HOST_CYGWIN
+  "osssink",
+#endif
 #if GGL_HOST_MACOSX
   "osxaudiosink",
 #endif
--- origsrc/google-gadgets-for-linux-0.10.5/ggadget/npapi/npapi_utils.cc	2008-12-05 05:23:43.000000000 -0600
+++ src/google-gadgets-for-linux-0.10.5/ggadget/npapi/npapi_utils.cc	2009-01-29 13:30:59.502363500 -0600
@@ -54,7 +54,11 @@ static void ScanDirsForPlugins(const std
       while ((dr = ::readdir(dp))) {
         lib = dr->d_name;
         std::string::size_type pos = lib.find_last_of(".");
+#if GGL_HOST_CYGWIN
+        if (pos != lib.npos && lib.compare(pos, 4, ".dll") == 0) {
+#else
         if (pos != lib.npos && lib.compare(pos, 3, ".so") == 0) {
+#endif
           lib = dirs[i] + "/" + lib;
           paths->push_back(lib);
           DLOG("Add plugin: %s", lib.c_str());
--- origsrc/google-gadgets-for-linux-0.10.5/ggadget/run_once.cc	2008-10-31 05:05:33.000000000 -0500
+++ src/google-gadgets-for-linux-0.10.5/ggadget/run_once.cc	2009-01-29 11:31:29.627363500 -0600
@@ -29,6 +29,10 @@
 #include "main_loop_interface.h"
 #include "signals.h"
 
+#if GGL_HOST_CYGWIN
+#define sig_t _sig_func_ptr
+#endif
+
 namespace ggadget {
 
 const size_t kBufferSize = 4096;
--- origsrc/google-gadgets-for-linux-0.10.5/ggadget/unicode_utils.cc	2008-11-30 22:14:36.000000000 -0600
+++ src/google-gadgets-for-linux-0.10.5/ggadget/unicode_utils.cc	2009-01-29 11:40:44.252363500 -0600
@@ -761,7 +761,7 @@ bool ConvertLocaleStringToUTF16(const ch
 
   bool success = true;
   mbstowcs(buffer, input, buffer_size);
-#if GGL_SIZEOF_WCHAR_T == 2
+#if GGL_SIZEOF_WCHAR_T == 2 && !GGL_HOST_CYGWIN
   result->assign(reinterpret_cast<UTF16Char *>(buffer));
 #else
   success = ConvertStringUTF32ToUTF16(reinterpret_cast<UTF32Char *>(buffer),
@@ -784,7 +784,7 @@ bool ConvertUTF16ToLocaleString(const UT
     return true;
 
   const wchar_t *wchar_input = NULL;
-#if GGL_SIZEOF_WCHAR_T == 2
+#if GGL_SIZEOF_WCHAR_T == 2 && !GGL_HOST_CYGWIN
   UTF16String utf16(input, input_size);
   wchar_input = utf16.c_str();
 #else
@@ -826,7 +826,7 @@ bool ConvertLocaleStringToUTF8(const cha
 
   bool success = true;
   mbstowcs(buffer, input, buffer_size);
-#if GGL_SIZEOF_WCHAR_T == 2
+#if GGL_SIZEOF_WCHAR_T == 2 && !GGL_HOST_CYGWIN
   success = ConvertStringUTF16ToUTF8(reinterpret_cast<UTF16Char *>(buffer),
                                      buffer_size - 1, result) ==
             buffer_size - 1;
@@ -851,7 +851,7 @@ bool ConvertUTF8ToLocaleString(const cha
     return true;
 
   const wchar_t *wchar_input = NULL;
-#if GGL_SIZEOF_WCHAR_T == 2
+#if GGL_SIZEOF_WCHAR_T == 2 && !GGL_HOST_CYGWIN
   UTF16String utf16;
   if (ConvertStringUTF8ToUTF16(input, input_size, &utf16) != input_size)
     return false;
--- origsrc/google-gadgets-for-linux-0.10.5/ggadget/variant.h	2009-01-05 03:04:01.000000000 -0600
+++ src/google-gadgets-for-linux-0.10.5/ggadget/variant.h	2009-01-29 11:16:38.627363500 -0600
@@ -154,6 +154,23 @@ class Variant {
     v_.int64_value_ = static_cast<int64_t>(value);
   }
 
+#if defined(__CYGWIN__)
+  /**
+   * Construct a @c Variant with a @c int value.
+   * The type of the constructed @c Variant is @c TYPE_INT64.
+   */
+  explicit Variant(int value) : type_(TYPE_INT64) {
+    v_.int64_value_ = static_cast<int64_t>(value);
+  }
+
+  /**
+   * Construct a @c Variant with a <code>unsigned int</code> value.
+   * The type of the constructed @c Variant is @c TYPE_INT64.
+   */
+  explicit Variant(unsigned int value) : type_(TYPE_INT64) {
+    v_.int64_value_ = static_cast<int64_t>(value);
+  }
+#else
 #if GGL_SIZEOF_LONG_INT != 8
   /**
    * Construct a @c Variant with a @c long value.
@@ -171,6 +188,7 @@ class Variant {
     v_.int64_value_ = static_cast<int64_t>(value);
   }
 #endif
+#endif
 
   /**
    * Construct a @c Variant with a @c int64_t value.
